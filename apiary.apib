FORMAT: 1A
HOST: http://www.google.com

# GroupAPI

Manage the social groups of a user

# Group Group

**Group API**

## Groups [/group]

### Create a group [POST]

+ Creator is admin of its group.
+ Group types are : "PUBLIC", "PRIVATE", "PRIVATE-WITH-TOKEN"
+ Admin is added to the member list of the group
    
+ Request (application/json)

    + Headers
    
            token: the token of the currently connected user
            
    + Body
    
            {"name" : "Ben's fan" , "type" : "PUBLIC", "readOnly" : false}

+ Response 200 (application/json)

        {
            "id" : 3 , "name" : "Ben's fan" , "type" : "PUBLIC", "readOnly" : false, "userId" : 1
        }

  
## One Group [/group/{group_id}]

### One group [GET]

+ Get one group

+ Request

    + Headers
    
            token: the token of the currently connected user
            
+ Response 200 (application/json)

        [{
            "id" : 3 , "name" : "Ben's fan" , "type" : "PUBLIC" , "expiry" : null, "readOnly" : false, "userId" : 1
        }]

### Update a group [PUT]

+ Update a group

+ Request

    + Headers
    
            token: the token of the currently connected user
            
    + Body
    
            {"name" : "Ben's fan", "userId": 12, "type" : "PUBLIC" , "expiry" : null, "readOnly" : false}

+ Response 200 (application/json)

        {
            "id" : 3 , "name" : "Ben's fan" , "type" : "PUBLIC" , "expiry" : null, "readOnly" : false, "userId" : 12
        }
        
### Delete a group [DELETE]

+ Delete a group
+ Needs to be owner of the group or have ROLE_ADMIN

+ Request

    + Headers
    
            token: the token of the currently connected user

+ Response 200 (application/json)

        {
            "restul" : "Group deleted"
        }
        
        
## Share [/group/{group_id}/share/?provider=facebook]

### Share the group URL on a provider [POST]

+ Only creator can share group URL ? If ok, group URL is shared on the provider described in the URL parameter
+ If group is PRIVATE-WITH-TOKEN type, it's the PRIVATE URL which is shared
+ If group is PRIVATE, an error is send

+ Parameters

    + group_id (required, number, `1`) ... Numeric id of the Group to perform action with.
    + provider (required, string, `facebook`) ... Facebook, Tweeter, Mail, SMS, etc.

+ Request

    + Headers
    
            token: the token of the currently connected user
            
+ Response 200 (application/json)

        {
            "result" : "Shared with success"
        }

## Subscribing a group [/group/{group_id}/subscribe?group_token=efzkof44]

### Subscribe a group [POST]

+ Subscribe to the group
+ Every body can subscribe to a public group
+ A raw is added to the user_group table.
+ user_group table link user table and group table.
+ Message is send to user to inform him that he was accepted to the group.
+ If group is "PRIVATE-WITH-TOKEN" type, user need to add the valid "group_token" parameter
+ If group is "PRIVATE" type, user need to be referenced in the invitation table

+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform action with.
    + group_token (optional, string, `fzeopkfez`) ... token for PRIVATE-WITH-TOKEN group.

+ Request

    + Headers
    
            token: the token of the currently connected user
            
+ Response 200 (application/json)

        {
            "result" : "You subscribed with success"
        }

### Unsubscribe a group [DELETE]

+ Unsubscribe from a group
+ group_token is not mandatory

+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform action with.

+ Request

    + Headers
    
            token: the token of the currently connected user
            
+ Response 200 (application/json)

        {
            "result" : "You unsubscribe with success"
        }
        

## One Group Count User [/group/{group_id}/countUser]

### Count user of a group [GET]

+ return the number of user of a group
+ for public groups you don't need to be connected

+ Request

    + Headers
    
            token: the token of the currently connected user
            
+ Response 200 (application/json)

        [{
            "id" : 3 , "name" : "Ben's fan" , "type" : "PUBLIC" , "expiry" : null, "readOnly" : false, "userId" : 1
        }]


## My subscribed groups [/group/mySubscribedGroupList?offset=0&count=5]

### Get my group list [GET]

+ Get all groups that i subscribed

+ Parameters

    + offset (required, number, `0`) ... First element of the list
    + count (required, number, `5`) ... Number of element for the list

+ Request

    + Headers
    
            token: the token of the currently connected user
            
+ Response 200 (application/json)

        {
            "data":[{
                "id" : 3 , "name" : "Ben's fan" , "type" : "PUBLIC" , "readOnly" : false, "userId" : 1
            },{
                "id" : 4 , "name" : "Nadia's fan" , "type" : "PUBLIC" , "readOnly" : false, "userId" : 1
            }],
            "nbElt" : 2,
            "offset": 0,
            "nbTotal": 2
        }
        
## My created groups [/group/myGroupList?offset=0&count=5]

### Get my group list [GET]

+ Get all groups that i created

+ Parameters

    + offset (required, number, `0`) ... First element of the list
    + count (required, number, `5`) ... Number of element for the list


+ Request

    + Headers
    
            token: the token of the currently connected user
            
+ Response 200 (application/json)

        {
            "data":[{
                "id" : 3 , "name" : "Ben's fan" , "type" : "PUBLIC" , "readOnly" : false, "userId" : 1
            },{
                "id" : 4 , "name" : "Nadia's fan" , "type" : "PUBLIC" , "readOnly" : false, "userId" : 1
            }],
            "nbElt" : 2,
            "offset": 0,
            "nbTotal": 2
        }
        
## Publics Groups [/group/publicGroupList?offset=0&count=5]

### Publics Groups [GET]

+ Get all publics groups
+ Return Group + a "subscribed" filed that tell if current user is subscibed to this group
+ A mandatory header 'X-SocialAPI-Service-Name' is required
+ If user is connected, serviceName must be the same as the service's name of the connected user

+ Parameters

    + offset (required, number, `0`) ... First element of the list
    + count (required, number, `5`) ... Number of element for the list


+ Request

    + Headers
    
            token: the token of the currently connected user
            X-SocialAPI-Service-Name: name of the service


+ Response 200 (application/json)

        {
            "data":[{
                "id" : 3 , "name" : "Ben's fan" , "type" : "PUBLIC" , "expiry" : null, "readOnly" : false, "userId" : 1, "subscribed": true, "creator" : "admin"
            },{
                "id" : 4 , "name" : "Nadia's fan" , "type" : "PUBLIC" , "expiry" : null, "readOnly" : false, "userId" : 1, "subscribed": false, "creator" : "admin"
            }],
            "nbElt" : 2,
            "offset": 0,
            "nbTotal": 2
        }

## All Groups by service name [/group/list?offset=0&count=5]

### Get all Groups by service name [GET]

+ Needs ROLE_ADMIN
+ Get all groups by service name
+ A mandatory header 'X-SocialAPI-Service-Name' is required

+ Parameters

    + offset (required, number, `0`) ... First element of the list
    + count (required, number, `5`) ... Number of element for the list

+ Request
    + Headers
    
            X-SocialAPI-Service-Name: name of the service
            token: the token of the currently connected user
            
+ Response 200 (application/json)

        {
            "data":[{
                "id" : 3 , "name" : "Ben's fan" , "type" : "PUBLIC" , "expiry" : null, "readOnly" : false, "userId" : 1, "subscribed": true, "creator" : "admin"
            },{
                "id" : 4 , "name" : "Nadia's fan" , "type" : "PUBLIC" , "expiry" : null, "readOnly" : false, "userId" : 1, "subscribed": false, "creator" : "admin"
            }],
            "nbElt" : 2,
            "offset": 0,
            "nbTotal": 2
        }
      
# Group Invitation

**Invitation API**

## Create an invitation [/invitation]

### Invite a user to the group [POST]

+ Only creator can invite someone to join the group.
+ If not creator, an error is send
+ If ok, a row is added to the invitation table. The invitation raw has a state "SEND", "ACCEPTED", "REFUSED", etc.
+ Notification is send to user using the "favoriteProviderForNotification" field.
+ Invitation is usefull only for PRIVATE group.

+ Request (application/json)

    + Headers
    
            token: the token of the currently connected user
            
    + Body
    
            {"userId" : "5456", "groupId" : 2}

+ Response 200 (application/json)

    + Body

            {
                "groupId" : 2,
                "userId" : "5456",
                "state" : "SEND",
                "date" : "2013-10-31 08:00:00
            }

## An invitation [/invitation/{group_id}]

### Accept an invitation [PUT]

+ Accept an invitation
+ User must have recieved an invitation before accept it
+ If user has already answer to the invitation : error

+ Parameters

    + group_id (required, number, `1`) ... Numeric id of the group of the invitation to perform action with.

+ Request

    + Headers
    
            token: the token of the currently connected user
            
+ Response 200 (application/json)

    + Body

            {
                "result" : "You have accepted the invitation with success"
            }
    
### Refuse an invitation [DELETE]

+ Refuse an invitation
+ User must have recieved an invitation before refuse it
+ If user has already answer to the invitation : error

+ Parameters

    + group_id (required, number, `1`) ... Numeric id of the group of the invitation to perform action with.

+ Request

    + Headers
    
            token: the token of the currently connected user
            

+ Response 200 (application/json)

    + Body

            {
                "result" : "You have refused the invitation with success"
            }

## Invitation List [/invitation/list?offset=0&count&state={invitation_state}]

### List all Invitations of the user [GET]

+ The only constraint is that user must be logged
+ If state is null, no filtering is applied

+ Parameters

    + invitation_state (optional, string, `SEND`) ... Filter results to this state
    + offset (required, number, `0`) ... First element of the list
    + count (required, number, `5`) ... Number of element for the list

+ Request

    + Headers
    
            token: the token of the currently connected user
            
+ Response 200 (application/json)

        {
            "data":[
            {
                "groupId" : 1,
                "groupName" : "Ben's family",
                "groupExpiry" : null,
                "creationDate" : "2013-10-31 08:00:00",
                "state" : "ACCEPTED"
            }, {
                "id" : 2,
                "group_id" : 2,
                "group_name" : "Nadia's family",
                "groupExpiry" : null,
                "creationDate" : "2013-10-31 08:00:00",
                "state" : "REFUSED"
            }],
            "nbElt": 2,
            "offset": 0,
            "nbTotal": 2
        }

## Invitation Count [/invitation/count?state={invitation_state}]

### Get invitation count for the user [GET]

+ User must be logged in
+ If state is null, no filtering is applied

+ Parameters

    + invitation_state (optional, string, `SEND`) ... Filter results to this state

+ Request

    + Headers
    
            token: the token of the currently connected user
            
+ Response 200 (application/json)

            14

# Group Message

**Message API**

## Messaging a group [/group/{group_id}/message]

### Send a message on a group [POST]

+ Post a message on a group
+ User need to be a member of the group
+ Every user of public group can post message if readonly = false
+ The message is added to the message table.
+ Message is send to all users of the group. It uses "favoriteProviderForNotification" field to send the message

+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform action with.

+ Request

    + Headers
    
            token: the token of the currently connected user
            

+ Request (application/json)
    
        {"text" : "I love Ben !"}

+ Response 200 (application/json)

        {
            "id" : 1,
            "text" : "I love Ben !",
            "date" : "2013-10-31 08:00:00",
            "groupId": 1,
            "userId": 1
        }

## Single message of a Group  [/group/{group_id}/message/{message_id}]

+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform action with.
    + message_id (required, number, `1`) ... Numeric `id` of the Message to perform action with.

### Get a single message [GET]

+ Get a single message

+ Request

    + Headers
    
            token: the token of the currently connected user

+ Response 200 (application/json)

        {
            "id" : 1,
            "text" : "I hate Ben !",
            "date" : "2013-10-31 08:00:00",
            "groupId": 1,
            "userId": 1
        }

### Edit a single message [PUT]

+ Edit a message
+ Only group admin or creator of the message can edit a message.
+ If ok, the raw is updated in the table message.

+ Request (application/json)

    + Headers
    
            token: the token of the currently connected user

    + Body
    
            {"text" : "I hate Ben !"}

+ Response 200 (application/json)

        {
            "id" : 1,
            "text" : "I hate Ben !",
            "date" : "2013-10-31 08:00:00",
            "groupId": 1,
            "userId": 1
        }

        
### Delete a single message [DELETE]

+ Delete a message on a group
+ Only group admin or creator of the message can delete a message.
+ If ok, the raw is deleted in the table message.
    
+ Request

    + Headers
    
            token: the token of the currently connected user

+ Response 200 (application/json)

        {
            "result" : "Message deleted with success"
        }
        
## Message list of a Group  [/group/{group_id}/message/list?offset=0&count=5]

### Get the list [GET]

+ Get all messages of the group
+ Every body can read messages of a public group
+ For PRIVATE group, user must be in the member list of the group

+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform action with.
    + offset (required, number, `0`) ... First element of the list
    + count (required, number, `5`) ... Number of element for the list

+ Request

    + Headers
    
            token: the token of the currently connected user

+ Response 200 (application/json)

        {
            "data":[{
                "id" : 1,
                "text" : "Hello everybody !",
                "date" : "2013-10-31 08:00:00",
                "groupId": 1,
                "userId": 1
            }, {
                "id" : 2,
                "text" : "Bye everybody !",
                "date" : "2013-10-31 23:00:00",
                "groupId": 1,
                "userId": 1
            }],
            "nbElt": 2,
            "offset": 0,
            "nbTotal": 2
        }